#!/usr/bin/env bash
set -euo pipefail

# Cores para mensagens
BLUE='\033[1;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}üîç Verificando se Helm est√° instalado...${NC}"
if ! command -v helm &>/dev/null; then
  echo -e "${RED}‚ùå Helm n√£o encontrado. Instale com: sudo apt install helm ou brew install helm${NC}"
  exit 1
fi

echo -e "${BLUE}üîç Verificando se kubectl est√° instalado...${NC}"
if ! command -v kubectl &>/dev/null; then
  echo -e "${RED}‚ùå kubectl n√£o encontrado. Instale com: sudo apt install kubectl ou brew install kubectl${NC}"
  exit 1
fi

echo -e "${BLUE}‚ûï Adicionando reposit√≥rio Helm do KubeCost...${NC}"
if ! helm repo list | grep -q "kubecost"; then
  helm repo add kubecost https://kubecost.github.io/cost-analyzer/
else
  echo -e "${GREEN}‚úî Reposit√≥rio kubecost j√° existe ‚Äî pulando${NC}"
fi

echo -e "${BLUE}üîÑ Atualizando reposit√≥rios Helm...${NC}"
helm repo update

echo -e "${BLUE}üìÅ Criando namespace 'kubecost' (se necess√°rio)...${NC}"
kubectl create namespace kubecost --dry-run=client -o yaml | kubectl apply -f -

echo -e "${BLUE}üöÄ Instalando KubeCost via Helm...${NC}"
helm upgrade --install kubecost kubecost/cost-analyzer \
  --namespace kubecost \
  --set kubecostToken="cluster-rpi-k3s" \
  --set prometheus.kubeStateMetrics.enabled=false \
  --set prometheus.nodeExporter.enabled=false \
  --set global.prometheus.enabled=false

echo -e "${GREEN}‚úÖ KubeCost instalado com sucesso no namespace 'kubecost'!${NC}"




# #!/usr/bin/env bash
# set -euo pipefail

# # Cores
# BLUE='\033[1;34m'
# GREEN='\033[0;32m'
# YELLOW='\033[1;33m'
# RED='\033[0;31m'
# NC='\033[0m'

# # Cluster config
# KUBECOST_NAMESPACE="kubecost"
# KUBECOST_TOKEN="cluster-rpi-k3s"
# PROMETHEUS_URL="http://monitoring-kube-prometheus-prometheus.monitoring.svc:9090"

# # Verifica√ß√£o de depend√™ncias
# echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"

# for cmd in helm kubectl; do
#   if ! command -v "$cmd" &>/dev/null; then
#     echo -e "${RED}‚ùå '$cmd' n√£o encontrado. Instale com: sudo apt install $cmd${NC}"
#     exit 1
#   fi
# done

# # Adiciona reposit√≥rio Helm
# echo -e "${BLUE}‚ûï Verificando reposit√≥rio Helm do Kubecost...${NC}"
# if ! helm repo list | grep -q "kubecost"; then
#   helm repo add kubecost https://kubecost.github.io/cost-analyzer/
#   echo -e "${GREEN}‚úî Reposit√≥rio Kubecost adicionado.${NC}"
# else
#   echo -e "${YELLOW}‚ÑπÔ∏è  Reposit√≥rio Kubecost j√° existe. Pulando.${NC}"
# fi

# echo -e "${BLUE}üîÑ Atualizando reposit√≥rios Helm...${NC}"
# helm repo update

# # Cria√ß√£o do namespace
# echo -e "${BLUE}üìÅ Criando namespace '${KUBECOST_NAMESPACE}' (se necess√°rio)...${NC}"
# kubectl create namespace "$KUBECOST_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

# # Testa conectividade com Prometheus
# echo -e "${BLUE}üåê Testando conex√£o com o Prometheus em: ${PROMETHEUS_URL}${NC}"
# kubectl run --rm -i --tty curl-prom --image=curlimages/curl --restart=Never \
#   -- curl -s -o /dev/null -w "%{http_code}" "$PROMETHEUS_URL/api/v1/status/buildinfo" | grep -q "200" \
#   && echo -e "${GREEN}‚úî Conex√£o com Prometheus bem-sucedida.${NC}" \
#   || { echo -e "${RED}‚ùå Falha ao se conectar ao Prometheus. Verifique a URL e conectividade dentro do cluster.${NC}"; exit 1; }

# # Instala√ß√£o do Kubecost via Helm
# echo -e "${BLUE}üöÄ Instalando Kubecost via Helm...${NC}"

# helm upgrade --install kubecost kubecost/cost-analyzer \
#   --namespace "$KUBECOST_NAMESPACE" \
#   --create-namespace \
#   --set kubecostToken="$KUBECOST_TOKEN" \
#   --set global.prometheus.enabled=false \
#   --set global.prometheus.fqdn="$PROMETHEUS_URL" \
#   --set prometheus.nodeExporter.enabled=false \
#   --set prometheus.kubeStateMetrics.enabled=false \
#   --set prometheus.kube-state-metrics.enabled=false \
#   --wait --timeout=10m || {
#     echo -e "${RED}‚ùå Falha ao instalar o Kubecost.${NC}"
#     exit 1
#   }

# # Aguarda o Pod principal ficar pronto
# echo -e "${BLUE}‚è≥ Aguardando pod 'kubecost-cost-analyzer' ficar pronto...${NC}"
# kubectl wait --namespace "$KUBECOST_NAMESPACE" \
#   --for=condition=ready pod \
#   --selector=app=kubecost-cost-analyzer \
#   --timeout=180s && \
#   echo -e "${GREEN}‚úÖ Kubecost instalado com sucesso e pronto para uso!${NC}" \
#   || echo -e "${YELLOW}‚ö†Ô∏è Pod n√£o ficou pronto no tempo esperado. Verifique com: kubectl get pods -n $KUBECOST_NAMESPACE${NC}"
