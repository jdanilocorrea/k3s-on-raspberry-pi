- name: Copiar e executar script de instalação do NGINX via Helm
  hosts: labs
  become: true
  vars:
    local_script_path: "../helm_installs/nginx_webserver_helm_install.sh"
    remote_script_path: "/home/{{ ansible_user }}/nginx_webserver_helm_install.sh"
    kubeconfig_path: "/home/{{ ansible_user }}/.kube/config"
    nginx_namespace: "nginx-web"

  tasks:

    - name: Verificar se o arquivo KUBECONFIG existe
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_status

    - name: Falhar se KUBECONFIG não existir
      fail:
        msg: "Arquivo KUBECONFIG '{{ kubeconfig_path }}' não encontrado."
      when: not kubeconfig_status.stat.exists

    - name: Copiar o script nginx_webserver_helm_install.sh para o host remoto
      copy:
        src: "{{ local_script_path }}"
        dest: "{{ remote_script_path }}"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Verificar se o script foi copiado com sucesso
      stat:
        path: "{{ remote_script_path }}"
      register: script_status

    - name: Falhar se o script não foi copiado corretamente
      fail:
        msg: "Script '{{ remote_script_path }}' não encontrado após cópia."
      when: not script_status.stat.exists

    - name: Executar o script nginx_webserver_helm_install.sh no host remoto com KUBECONFIG
      shell: "/bin/bash {{ remote_script_path }}"
      args:
        chdir: "/home/{{ ansible_user }}"
      become: false
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: nginx_script_output
      retries: 2
      delay: 20
      until: nginx_script_output.rc == 0
      failed_when: nginx_script_output.rc != 0

    - name: Exibir saída do script nginx_webserver_helm_install.sh
      debug:
        var: nginx_script_output.stdout_lines

    - name: Exibir erros do script nginx_webserver_helm_install.sh, se houver
      debug:
        var: nginx_script_output.stderr_lines
      when: nginx_script_output.rc != 0

    - name: Aguardar pods do NGINX ficarem prontos
      shell: |
        kubectl wait --namespace {{ nginx_namespace }} \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/name=nginx \
          --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      become: false
      become_user: "{{ ansible_user }}"
      register: nginx_ready
      retries: 3
      delay: 15
      until: nginx_ready.rc == 0

    - name: Exibir IP externo do serviço NGINX
      shell: |
        kubectl get svc -n {{ nginx_namespace }} -l app.kubernetes.io/name=nginx \
          -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      become: false
      become_user: "{{ ansible_user }}"
      register: nginx_ip_output

    - name: Mostrar IP externo do NGINX
      debug:
        msg: "IP externo do serviço NGINX: {{ nginx_ip_output.stdout }}"
